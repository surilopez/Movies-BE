// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies_BE;
using NetTopologySuite.Geometries;

namespace Movies_BE.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20210106193819_Movies")]
    partial class Movies
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Movies_BE.Entities.Actor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Movies_BE.Entities.Genres", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Movies_BE.Entities.Movies", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Trailer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("onTheater")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Movies_BE.Entities.MoviesActors", b =>
                {
                    b.Property<int>("ActorID")
                        .HasColumnType("int");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("ActorID", "MovieID");

                    b.HasIndex("MovieID");

                    b.ToTable("MoviesActors");
                });

            modelBuilder.Entity("Movies_BE.Entities.MoviesGenres", b =>
                {
                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.HasKey("GenreID", "MovieID");

                    b.HasIndex("MovieID");

                    b.ToTable("MoviesGenres");
                });

            modelBuilder.Entity("Movies_BE.Entities.MoviesTheaters", b =>
                {
                    b.Property<int>("TheaterID")
                        .HasColumnType("int");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.HasKey("TheaterID", "MovieID");

                    b.HasIndex("MovieID");

                    b.ToTable("MoviesTheaters");
                });

            modelBuilder.Entity("Movies_BE.Entities.Theaters", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("id");

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("Movies_BE.Entities.MoviesActors", b =>
                {
                    b.HasOne("Movies_BE.Entities.Actor", "actor")
                        .WithMany("moviesActors")
                        .HasForeignKey("ActorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies_BE.Entities.Movies", "movie")
                        .WithMany("moviesActors")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("actor");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("Movies_BE.Entities.MoviesGenres", b =>
                {
                    b.HasOne("Movies_BE.Entities.Genres", "genre")
                        .WithMany("moviesGenres")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies_BE.Entities.Movies", "movie")
                        .WithMany("moviesGenres")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("genre");

                    b.Navigation("movie");
                });

            modelBuilder.Entity("Movies_BE.Entities.MoviesTheaters", b =>
                {
                    b.HasOne("Movies_BE.Entities.Movies", "movie")
                        .WithMany("moviesTheaters")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movies_BE.Entities.Theaters", "theater")
                        .WithMany("moviesTheaters")
                        .HasForeignKey("TheaterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("theater");
                });

            modelBuilder.Entity("Movies_BE.Entities.Actor", b =>
                {
                    b.Navigation("moviesActors");
                });

            modelBuilder.Entity("Movies_BE.Entities.Genres", b =>
                {
                    b.Navigation("moviesGenres");
                });

            modelBuilder.Entity("Movies_BE.Entities.Movies", b =>
                {
                    b.Navigation("moviesActors");

                    b.Navigation("moviesGenres");

                    b.Navigation("moviesTheaters");
                });

            modelBuilder.Entity("Movies_BE.Entities.Theaters", b =>
                {
                    b.Navigation("moviesTheaters");
                });
#pragma warning restore 612, 618
        }
    }
}
